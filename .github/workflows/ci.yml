name: BERT v3.0 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  ELECTRON_VERSION: '28'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: cpp, javascript
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  cpp-build:
    name: C++ Components Build
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64, Win32]
        configuration: [Debug, Release]
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3
      
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '2023.12.12'
      
      - name: Cache vcpkg packages
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/vcpkg/installed
            ${{ github.workspace }}/vcpkg/packages
          key: vcpkg-${{ matrix.platform }}-${{ hashFiles('**/vcpkg.json') }}
      
      - name: Install Protocol Buffers
        run: |
          vcpkg install protobuf:${{ matrix.platform }}-windows
      
      - name: Build BERT Core
        run: |
          msbuild BERT/BERT.sln /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }} /p:VcpkgTriplet=${{ matrix.platform }}-windows
      
      - name: Run C++ Tests
        if: matrix.configuration == 'Debug'
        run: |
          echo "Running C++ unit tests..."
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: bert-cpp-${{ matrix.platform }}-${{ matrix.configuration }}
          path: |
            Build/
            !Build/**/*.pdb

  console-build:
    name: Console Application Build
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: Console/package-lock.json
      
      - name: Install Dependencies
        working-directory: Console
        run: npm ci
      
      - name: Run TypeScript Compilation
        working-directory: Console
        run: npm run build
      
      - name: Run Tests
        working-directory: Console
        run: |
          npm test -- --coverage --watchAll=false
      
      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          directory: Console/coverage
      
      - name: Build Electron App
        working-directory: Console
        run: npm run package
      
      - name: Upload Console Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: bert-console
          path: Console/dist/

  docker-build:
    name: Docker Services Build
    runs-on: ubuntu-latest
    needs: [security-scan]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build API Gateway Service
        uses: docker/build-push-action@v5
        with:
          context: services/api-gateway
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository }}/api-gateway:latest
            ghcr.io/${{ github.repository }}/api-gateway:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-tests:
    name: Integration Tests
    runs-on: windows-latest
    needs: [cpp-build, console-build]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      
      - name: Setup Test Environment
        run: |
          choco install r.project julia -y
      
      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."
      
      - name: Performance Benchmarks
        run: |
          echo "Running performance benchmarks..."

  release:
    name: Release Management
    runs-on: ubuntu-latest
    needs: [cpp-build, console-build, docker-build, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts/
      
      - name: Create Release Package
        run: |
          mkdir -p release/
          cp -r release-artifacts/* release/
      
      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release